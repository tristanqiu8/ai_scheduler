=== 测试段级调度概念 ===

任务配置:
  TaskA: NPU(10ms) → DSP(15ms) → NPU(5ms)
  TaskB: NPU(8ms) → NPU(8ms)

模拟段级调度执行:

段信息:
  TaskA_seg0: NPU
  TaskA_seg1: DSP
  TaskA_seg2: NPU
  TaskB_seg0: NPU
  TaskB_seg1: NPU
     0.0ms: [EXECUTE] TaskA#0_seg0 on NPU_0 (duration=10.0ms)
    10.1ms: [EXECUTE] TaskB#0_seg0 on NPU_0 (duration=8.0ms)
    10.1ms: [READY] TaskA_seg1
    10.2ms: [EXECUTE] TaskA#0_seg1 on DSP_0 (duration=15.0ms)
    18.1ms: [READY] TaskB_seg1
    18.2ms: [EXECUTE] TaskB#0_seg1 on NPU_0 (duration=8.0ms)
    25.2ms: [READY] TaskA_seg2
    26.2ms: [EXECUTE] TaskA#0_seg2 on NPU_0 (duration=5.0ms)

执行时间线:

================================================================================   
Schedule Timeline (Total: 31.2ms)
================================================================================   
Resource           0.0       4.7       9.3      14.0      18.6      23.3      27.9 
--------------------------------------------------------------------------------
DSP_0                             NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
NPU_0        NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
--------------------------------------------------------------------------------
Priority: C=CRITICAL, H=HIGH, N=NORMAL, L=LOW

Resource Utilization:
  DSP_0: 48.1%
  NPU_0: 99.4%

关键观察:
1. 当TaskA的第一段在NPU上执行时，DSP是空闲的
2. 当TaskA的第二段在DSP上执行时，NPU是空闲的
3. 段级调度应该允许TaskB的段在TaskA使用DSP时使用NPU

资源利用率:
  NPU_0: 99.4%
  DSP_0: 48.1%


=== 测试优化潜力 ===

场景1：传统调度（任务必须完整执行）

执行顺序:
  0-10ms:  TaskA_seg0 on NPU
  10-25ms: TaskA_seg1 on DSP (NPU空闲!)
  25-30ms: TaskA_seg2 on NPU
  30-38ms: TaskB_seg0 on NPU (等待TaskA完成)
  38-46ms: TaskB_seg1 on NPU

  38-46ms: TaskB_seg1 on NPU

结果:
  总执行时间: 46.0ms
  NPU利用率: 67.4%
  DSP利用率: 32.6%
结果:
  总执行时间: 46.0ms
  NPU利用率: 67.4%
  DSP利用率: 32.6%

场景2：段级调度（段可独立执行）

优化的执行顺序:

场景2：段级调度（段可独立执行）

优化的执行顺序:
  0-10ms:  TaskA_seg0 on NPU
  10-18ms: TaskB_seg0 on NPU (立即开始!)
  10-25ms: TaskA_seg1 on DSP (并行执行!)
  18-26ms: TaskB_seg1 on NPU
  0-10ms:  TaskA_seg0 on NPU
  10-18ms: TaskB_seg0 on NPU (立即开始!)
  10-25ms: TaskA_seg1 on DSP (并行执行!)
  18-26ms: TaskB_seg1 on NPU
  26-31ms: TaskA_seg2 on NPU

结果:
结果:
  总执行时间: 31.0ms
  NPU利用率: 100.0%
  NPU利用率: 100.0%
  DSP利用率: 48.4%

性能对比:
性能对比:
  执行时间减少: 15.0ms (32.6%)
  NPU利用率提升: 32.6%


关键洞察:
  ✓ 段级调度允许TaskB在TaskA使用DSP时开始执行
  ✓ NPU和DSP可以真正并行工作
  ✓ NPU和DSP可以真正并行工作
  ✓ 整体性能提升32.6%

  ✓ 整体性能提升32.6%

执行时间线对比:


传统调度:
NPU: [TaskA_seg0    ][----空闲----][TaskA_seg2][TaskB_seg0 ][TaskB_seg1 ]
DSP: [----空闲----][TaskA_seg1         ][----------空闲-----------]
DSP: [----空闲----][TaskA_seg1         ][----------空闲-----------]

段级调度:
段级调度:
段级调度:
NPU: [TaskA_seg0    ][TaskB_seg0 ][TaskB_seg1 ][TaskA_seg2]
DSP: [----空闲----][TaskA_seg1         ][---空闲---]
(base) PS G:\workspace\ai_scheduler>
段级调度:
NPU: [TaskA_seg0    ][TaskB_seg0 ][TaskB_seg1 ][TaskA_seg2]
段级调度:
段级调度:
NPU: [TaskA_seg0    ][TaskB_seg0 ][TaskB_seg1 ][TaskA_seg2]
DSP: [----空闲----][TaskA_seg1         ][---空闲---]